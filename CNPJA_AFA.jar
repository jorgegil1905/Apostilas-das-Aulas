
import java.util.regex.Pattern;

public class CnpjAlfanumericoValidator {

    // Regex para validar o formato: 12 caracteres alfanuméricos + 2 dígitos
    private static final Pattern CNPJ_REGEX = Pattern.compile("^[A-Z0-9]{12}[0-9]{2}$");

    /**
     * Valida um CNPJ alfanumérico com base em uma regra de cálculo de dígito verificador.
     *
     * @param cnpjCompleto O CNPJ completo de 14 caracteres a ser validado.
     * @return true se o CNPJ for válido, false caso contrário.
     */
    public boolean validar(String cnpjCompleto) {
        if (cnpjCompleto == null) {
            System.out.println("ERRO: O CNPJ não pode ser nulo.");
            return false;
        }

        String cnpjFormatado = cnpjCompleto.toUpperCase().trim();

        // 1. Verifica o formato da string
        if (!CNPJ_REGEX.matcher(cnpjFormatado).matches()) {
            System.out.println("ERRO: Formato inválido. O CNPJ deve ter 14 caracteres, com os 2 últimos sendo numéricos.");
            return false;
        }

        // Separa a base e os DVs
        String cnpjBase = cnpjFormatado.substring(0, 12);
        String dvsFornecidos = cnpjFormatado.substring(12, 14);

        // 2. Calcula os DVs com a nossa regra
        String dv1Calculado = calcularDv(cnpjBase);
        String baseComDv1 = cnpjBase + dv1Calculado;
        String dv2Calculado = calcularDv(baseComDv1);
        
        String dvsCalculados = dv1Calculado + dv2Calculado;

        // 3. Compara os DVs fornecidos com os calculados
        if (dvsCalculados.equals(dvsFornecidos)) {
            System.out.println("O CNPJ '" + cnpjFormatado + "' é VÁLIDO. DVs corretos: " + dvsCalculados);
            return true;
        } else {
            System.out.println("O CNPJ '" + cnpjFormatado + "' é INVÁLIDO. DVs corretos seriam: " + dvsCalculados);
            return false;
        }
    }

    /**
     * Converte um caractere alfanumérico para um valor numérico.
     * Números (0-9) mantêm seu valor. Letras (A-Z) seguem a regra A=17, B=18, etc.
     *
     * @param ch O caractere a ser convertido.
     * @return O valor numérico correspondente.
     */
    private int charParaValor(char ch) {
        if (Character.isDigit(ch)) {
            return Character.getNumericValue(ch);
        } else {
            // A=17, B=18, C=19...
            return ch - 'A' + 17;
        }
    }

    /**
     * Calcula um dígito verificador para uma base de caracteres.
     *
     * @param base A string base para o cálculo.
     * @return O dígito verificador como string.
     */
    private String calcularDv(String base) {
        int soma = 0;
        int peso = 2;

        // Percorre a base de trás para frente
        for (int i = base.length() - 1; i >= 0; i--) {
            int valor = charParaValor(base.charAt(i));
            soma += valor * peso;
            peso = peso + 1;
            if (peso > 9) {
                peso = 2;
            }
        }

        int resto = soma % 11;
        int dv = (resto < 2) ? 0 : (11 - resto);

        return String.valueOf(dv);
    }

    public static void main(String[] args) {
        CnpjAlfanumericoValidator validator = new CnpjAlfanumericoValidator();

        System.out.println("--- Testando CNPJs com a sua regra de cálculo ---");

        // Exemplo com a base "ABCDEFGHIJKL" e DVs "62"
        System.out.println("\nVerificando o CNPJ com DVs corretos:");
        validator.validar("ABCDEFGHIJKL62");

        // Exemplo com os DVs incorretos
        System.out.println("\nVerificando o CNPJ com DVs incorretos:");
        validator.validar("ABCDEFGHIJKL80");

        // Exemplo com formato inválido (letra no lugar do DV)
        System.out.println("\nVerificando o CNPJ com formato inválido:");
        validator.validar("ABCDEFGHIJKLAZ");
    }
}